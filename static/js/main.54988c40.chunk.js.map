{"version":3,"sources":["Stories/Gif.view.logic.js","Stories/Label.view.logic.js","Stories/GifList.view.js","Stories/GifList.view.logic.js","Stories/App.view.js","useFlow.js","serviceWorker.js","index.js","Stories/App.view.logic.js"],"names":["gif","embed_url","title","className","src","width","height","frameBorder","allowFullScreen","GifList","props","Fragment","data-testid","Array","isArray","from","map","item","index","key","children","GifListLogic","useState","gifs","setGifs","shuffle","arr","temp","ctr","length","Math","floor","random","getRandom","a","result","tags","concat","i","tag","fetch","process","headers","res","json","meta","status","data","push","useEffect","then","styles","Vertical","css","label","alignItems","flexBasis","flexGrow","flexShrink","justifyContent","App","flow","GetFlow","React","createContext","Set","SetFlow","Map","parent","isSeparate","stories","TOP_STORY","ensureFirstStoryIsOn","has","story","get","size","canAdd","intersection","id","add","b","filter","ai","difference","getNextFlow","state","next","ensureParents","diffIn","diffOut","forEach","getAllChildrenOf","cid","nextState","sort","Flow","initialState","setState","setFlow","useCallback","Provider","value","defaultProps","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wOAGe,kBAAaA,EAAb,EAAEC,UAAuBC,EAAzB,EAAkBA,MAAlB,OACd,yBAAKC,UAAU,eACd,6BAAMD,GACN,4BAAQE,IAAKJ,EAAKE,MAAOA,EAAOG,MAAM,OAAOC,OAAO,OAAOC,YAAY,IAAIC,iBAAe,MCH7E,kBAASN,EAAT,EAAEA,MAAF,OACd,yBAAKC,UAAU,yBACbD,ICqBYO,EApBD,SAAAC,GACZ,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAOC,cAAY,gBAAgBV,MAAM,gBACzC,yBAAKU,cAAY,eAAeT,UAAU,eACvCU,MAAMC,QAAQJ,EAAMK,OACnBL,EAAMK,KAAKC,IAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,EAAD,eACEA,MAAOA,GACHD,EAFN,CAGEE,IAAKD,EACLN,cAAY,oBAInBF,EAAMU,W,MCjBE,SAASC,EAAaX,GAAQ,IAAD,EACnBY,mBAAS,IADU,mBACrCC,EADqC,KAC/BC,EAD+B,KAGrCC,EAAU,SAACC,GAEhB,IADA,IAAsBC,EAAMT,EAAxBU,EAAMF,EAAIG,OACPD,EAAM,GACZV,EAAQY,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCD,EAAOD,IADPE,GAEAF,EAAIE,GAAOF,EAAIR,GACfQ,EAAIR,GAASS,EAEd,OAAOD,GAKFO,EAAS,sCAAG,wCAAAC,EAAA,qDACXC,EAAS,GAEfC,EAAOX,GADHW,EAAO,CAAC,MAAO,MAAO,SAAS,QAAQ,WAAW,OAAO,WACzCC,OAAOD,IAClBE,EAAI,EAJI,YAIDA,EAAIF,EAAKP,QAJR,wBAKVU,EAAMH,EAAKE,GALD,SAMEE,MAAM,GAAD,OAAIC,uCAAJ,oBAAyDA,mCAAzD,gBAAuGF,EAAvG,aAAsH,CAC5IG,QAAU,CACT,eAAgB,mBAChB,OAAU,sBATI,cAMVC,EANU,iBAYGA,EAAIC,OAZP,QAaS,OADnBA,EAZU,QAaPC,KAAKC,SACNC,EAAQH,EAARG,KACPZ,EAAOa,KAAKD,IAfG,QAIgBT,IAJhB,gDAkBVH,GAlBU,0CAAH,qDAuBf,OAHAc,oBAAU,WACRhB,IAAYiB,KAAK1B,IAChB,IACI,kBAAC,EAAD,iBAAad,EAAb,CAAoBK,KAAMQ,K,WCtC9B4B,EAAS,GACbA,EAAOC,SAAWC,YAAI,CACpBC,MAAO,WACPC,WAAY,SACZC,UAAW,OACXC,SAAU,EACVC,WAAY,EACZC,eAAgB,WAGlB,IAeeC,EAfL,SAAAlD,GACR,OACE,kBAAC,IAAMC,SAAP,KACE,yBACEC,cAAY,eACZiD,KAAK,WACL1D,UAAS,sBAAiBgD,EAAOC,WAEjC,kBAAC,EAAD,CAASxC,cAAY,iBAEtBF,EAAMU,W,OCnBT0C,EAAUC,IAAMC,cAAc,IAAIC,KAClCC,EAAUH,IAAMC,cAAc,cAKvBH,EAAO,IAAIM,IAAI,CACxB,CACE,OACA,CACEC,OAAQ,GACRC,YAAY,EACZC,QAAS,IAAIL,QAKfM,EAAY,OAEhB,SAASC,EAAqBrD,EAAKmD,GACjC,GAAKA,EAAQG,IAAItD,GAAjB,CAEA,IAAIuD,EAAQb,EAAKc,IAAIxD,GACrB,GAAIuD,EAAMJ,QAAQM,KAAO,EAAG,CAC1B,IAAI1D,EAAQ,EACR2D,EAAuD,IAA9CC,EAAaR,EAASI,EAAMJ,SAASM,KAFxB,uBAG1B,YAAeF,EAAMJ,QAArB,+CAA8B,CAAC,IAAtBS,EAAqB,SACvBF,GAAoB,IAAV3D,IAAiBwD,EAAML,aACpCC,EAAQU,IAAID,GAEd7D,IACAsD,EAAqBO,EAAIT,IARD,qFA+B9B,IAAIQ,EAAe,SAAC5C,EAAG+C,GAAJ,OAAU,IAAIhB,IAAI,YAAI/B,GAAGgD,OAAO,SAAAC,GAAE,OAAIF,EAAER,IAAIU,OAC3DC,EAAa,SAAClD,EAAG+C,GAAJ,OAAU,IAAIhB,IAAI,YAAI/B,GAAGgD,OAAO,SAAAC,GAAE,OAAKF,EAAER,IAAIU,OAE9D,SAASE,EAAYlE,EAAKmE,GACxB,GAAIA,EAAMb,IAAItD,GAAM,OAAOmE,EAE3B,IAAIC,EAAO,IAAItB,IAAI,CAAC9C,IAEpBqD,EAAqBrD,EAAKoE,GA1B5B,SAASC,EAAcrE,EAAKmD,GAC1B,IAAII,EAAQb,EAAKc,IAAIxD,GAChBuD,EAAMN,SAEXE,EAAQU,IAAIN,EAAMN,QAClBoB,EAAcd,EAAMN,OAAQE,IAsB5BkB,CAAcrE,EAAKoE,GAEnB,IAAIE,EAASL,EAAWG,EAAMD,GAC1BI,EAAU,IAAIzB,IAElBmB,EAAWE,EAAOC,GAAMI,QAAQ,SAAAZ,GAC9B,IAAIL,EAAQb,EAAKc,IAAII,GACrB,GAAIO,EAAMb,IAAIC,EAAMN,QAAS,CAC3B,IAAIA,EAASP,EAAKc,IAAID,EAAMN,QAC5B,GAAIU,EAAaV,EAAOE,QAASmB,GAAQb,KAAO,EAAG,CACjDc,EAAQV,IAAID,GACZ,IAAI3D,EAAW,IAAI6C,KA9B3B,SAAS2B,EAAiBzE,EAAKC,GAC7B,GAAKyC,EAAKY,IAAItD,GAAd,CAEA,IAAIuD,EAAQb,EAAKc,IAAIxD,GAHkB,uBAIvC,YAAeuD,EAAMJ,QAArB,+CAA8B,CAAC,IAAtBS,EAAqB,QAC5B3D,EAAS4D,IAAID,GACba,EAAiBb,EAAI3D,IANgB,oFA+BjCwE,CAAiBb,EAAI3D,GACrBA,EAASuE,QAAQ,SAAAE,GAAG,OAAIH,EAAQV,IAAIa,SAK1C,IAAIC,EAAY,IAAI7B,IAAJ,sBAAYmB,EAAWE,EAAOI,IAA9B,YAA2CD,KAE3D,OADAjB,EAAqBD,EAAWuB,GACzB,IAAI7B,IAAI,YAAI6B,GAAWC,QAGzB,SAASC,EAAKtF,GAAQ,IAAD,EACFY,mBAASZ,EAAMuF,cADb,mBACrBX,EADqB,KACdY,EADc,KAGtBC,EAAUC,sBAAY,SAAArB,GAYxBmB,EAAS,SAAAZ,GAAK,OAAID,EAAYN,EAAIO,MACjC,IAUH,OARArC,oBAAU,WACJR,GAKH,CAAC6C,IAGF,kBAACpB,EAAQmC,SAAT,CAAkBC,MAAOH,GACvB,kBAACrC,EAAQuC,SAAT,CAAkBC,MAAOhB,GAAQ5E,EAAMU,WAK7C4E,EAAKO,aAAe,CAClBN,aAAc,IAAIhC,IAAI,CAAC,UCnHzB,IAAMuC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT7D,KAAK,SAAAkE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf2B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO,kBCFD,SAAkBvH,GAChC,OACC,kBAACsF,EAAD,KACC,kBAAC,EAAQtF,KDDI,MAASwH,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAI3F,GAAwBiE,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,UAAMtE,GAAN,sBAEP+D,IAgEV,SAAiCO,EAAOC,GAEtCxE,MAAMuE,GACH7D,KAAK,SAAAsF,GAEJ,IAAMC,EAAcD,EAAS9F,QAAQiC,IAAI,gBAEnB,MAApB6D,EAAS1F,QACO,MAAf2F,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMzF,KAAK,SAAAkE,GACjCA,EAAawB,aAAa1F,KAAK,WAC7BwD,OAAOC,SAASkC,aAKpB/B,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEArFAmB,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMzF,KAAK,WACjCwE,QAAQC,IACN,gHAMJb,EAAgBC,EAAOC,MCvC/BE,I","file":"static/js/main.54988c40.chunk.js","sourcesContent":["import React from 'react'\n\n// The Gif object, actually an iframe\nexport default ({embed_url: gif, title: title}) => (\n\t<div className=\"giphy-embed\">\n\t\t<div>{title}</div>\n\t\t<iframe src={gif} title={title} width=\"100%\" height=\"100%\" frameBorder=\"0\" allowFullScreen></iframe>\n\t</div>\n);","import React from 'react'\n\n// The Gif object, actually an iframe\nexport default ({title: title}) => (\n\t<div className=\"label animate-flicker\">\n\t\t{title}\n\t</div>\n)","// This file is auto-generated. Edit GifList.view to change it. More info: https://github.com/viewstools/docs/blob/master/UseViews/README.md#viewjs-is-auto-generated-and-shouldnt-be-edited\n/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */\nimport Gif from './Gif.view.logic.js';\nimport Label from './Label.view.logic.js';\nimport React from 'react';\n\nlet GifList = props => {\n  return (\n    <React.Fragment>\n      <Label data-testid=\"GifList.Label\" title=\"Random List\" />\n      <div data-testid=\"GifList.List\" className=\"views-block\">\n        {Array.isArray(props.from) &&\n          props.from.map((item, index) => (\n            <Gif\n              index={index}\n              {...item}\n              key={index}\n              data-testid=\"GifList.Gif\"\n            />\n          ))}\n      </div>\n      {props.children}\n    </React.Fragment>\n  );\n};\n\nexport default GifList;\n","import React, { useState, useEffect } from 'react'\nimport GifList from './GifList.view.js'\nimport '../css/custom.css'\n\nexport default function GifListLogic(props) {\n\tlet [ gifs, setGifs ] = useState([]);\n\t//Shuffle array\n\tconst shuffle = (arr) => {\n\t\tvar ctr = arr.length, temp, index;\n\t\twhile (ctr > 0) {\n\t\t\tindex = Math.floor(Math.random() * ctr);\n\t\t\tctr--;\n\t\t\ttemp = arr[ctr];\n\t\t\tarr[ctr] = arr[index];\n\t\t\tarr[index] = temp;\n\t\t}\n\t\treturn arr;\n\t};\n\t/**\n\t * Returns a list of random gifs\n\t */\n\tconst getRandom = async () => {\n\t\tconst result = []\n\t\tlet tags = ['cat', 'dog', 'kitten','puppy','elephant','lion','monkey'];\n\t\ttags = shuffle(tags.concat(tags));\n\t\tfor (let i = 0; i < tags.length; i++) {\n\t\t\tconst tag = tags[i];\n\t\t\tconst res = await fetch(`${process.env['REACT_APP_GIPHY_RANDOM_URL']}?api_key=${process.env['REACT_APP_GIPHY_API_KEY']}&tag=${tag} adorable`,{\n\t\t\t\theaders : { \n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst json = await res.json();\n\t\t\tif (json.meta.status === 200) {\n\t\t\t\tconst {data} = json;\n\t\t\t\tresult.push(data);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\tuseEffect(function () {\n\t\t\tgetRandom().then(setGifs);\n\t}, [])\n\treturn <GifList {...props} from={gifs} />\n}","// This file is auto-generated. Edit App.view to change it. More info: https://github.com/viewstools/docs/blob/master/UseViews/README.md#viewjs-is-auto-generated-and-shouldnt-be-edited\n/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */\nimport GifList from './GifList.view.logic.js';\nimport React from 'react';\nimport { css } from 'emotion';\n\nlet styles = {};\nstyles.Vertical = css({\n  label: 'Vertical',\n  alignItems: 'center',\n  flexBasis: 'auto',\n  flexGrow: 1,\n  flexShrink: 1,\n  justifyContent: 'center',\n});\n\nlet App = props => {\n  return (\n    <React.Fragment>\n      <div\n        data-testid=\"App.Vertical\"\n        flow=\"together\"\n        className={`views-block ${styles.Vertical}`}\n      >\n        <GifList data-testid=\"App.GifList\" />\n      </div>\n      {props.children}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This file is automatically generated by Views and will be overwritten\n// when the morpher runs. If you want to contribute to how it's generated, eg,\n// improving the algorithms inside, etc, see this:\n// https://github.com/viewstools/morph/blob/master/ensure-flow.js\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\n\nlet GetFlow = React.createContext(new Set());\nlet SetFlow = React.createContext(() => {});\n\nexport let useFlow = () => useContext(GetFlow);\nexport let useSetFlow = () => useContext(SetFlow);\n\nexport let flow = new Map([\n  [\n    '/App',\n    {\n      parent: '',\n      isSeparate: false,\n      stories: new Set(),\n    },\n  ],\n]);\n\nlet TOP_STORY = '/App';\n\nfunction ensureFirstStoryIsOn(key, stories) {\n  if (!stories.has(key)) return;\n\n  let story = flow.get(key);\n  if (story.stories.size > 0) {\n    let index = 0;\n    let canAdd = intersection(stories, story.stories).size === 0;\n    for (let id of story.stories) {\n      if ((canAdd && index === 0) || !story.isSeparate) {\n        stories.add(id);\n      }\n      index++;\n      ensureFirstStoryIsOn(id, stories);\n    }\n  }\n}\n\nfunction ensureParents(key, stories) {\n  let story = flow.get(key);\n  if (!story.parent) return;\n\n  stories.add(story.parent);\n  ensureParents(story.parent, stories);\n}\n\nfunction getAllChildrenOf(key, children) {\n  if (!flow.has(key)) return;\n\n  let story = flow.get(key);\n  for (let id of story.stories) {\n    children.add(id);\n    getAllChildrenOf(id, children);\n  }\n}\n\nlet intersection = (a, b) => new Set([...a].filter(ai => b.has(ai)));\nlet difference = (a, b) => new Set([...a].filter(ai => !b.has(ai)));\n\nfunction getNextFlow(key, state) {\n  if (state.has(key)) return state;\n\n  let next = new Set([key]);\n\n  ensureFirstStoryIsOn(key, next);\n  ensureParents(key, next);\n\n  let diffIn = difference(next, state);\n  let diffOut = new Set();\n\n  difference(state, next).forEach(id => {\n    let story = flow.get(id);\n    if (state.has(story.parent)) {\n      let parent = flow.get(story.parent);\n      if (intersection(parent.stories, diffIn).size > 0) {\n        diffOut.add(id);\n        let children = new Set();\n        getAllChildrenOf(id, children);\n        children.forEach(cid => diffOut.add(cid));\n      }\n    }\n  });\n\n  let nextState = new Set([...difference(state, diffOut), ...diffIn]);\n  ensureFirstStoryIsOn(TOP_STORY, nextState);\n  return new Set([...nextState].sort());\n}\n\nexport function Flow(props) {\n  let [state, setState] = useState(props.initialState);\n\n  let setFlow = useCallback(id => {\n    if (process.env.NODE_ENV === 'development') {\n      console.debug('setFlow', id);\n\n      if (!flow.has(id)) {\n        console.log('Stories', flow);\n        throw new Error(\n          `Story \"${id}\" doesn't exist. See the valid stories logged above this error.`\n        );\n      }\n    }\n\n    setState(state => getNextFlow(id, state));\n  }, []);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      if (state.size > 0) {\n        console.debug('flow', state);\n      }\n    }\n  }, [state]);\n\n  return (\n    <SetFlow.Provider value={setFlow}>\n      <GetFlow.Provider value={state}>{props.children}</GetFlow.Provider>\n    </SetFlow.Provider>\n  );\n}\n\nFlow.defaultProps = {\n  initialState: new Set(['/App']),\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Stories/App.view.logic.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import App from './App.view.js'\nimport { Flow } from '../useFlow.js'\nimport React from 'react'\n\nexport default function AppLogic(props) {\n\treturn (\n\t\t<Flow>\n\t\t\t<App {...props} />\n\t\t</Flow>\n\t)\n}"],"sourceRoot":""}